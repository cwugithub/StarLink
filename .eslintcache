[{"/home/ubuntu01/Developer/Laioffer/starlink/src/index.js":"1","/home/ubuntu01/Developer/Laioffer/starlink/src/reportWebVitals.js":"2","/home/ubuntu01/Developer/Laioffer/starlink/src/components/App.js":"3","/home/ubuntu01/Developer/Laioffer/starlink/src/components/Header.js":"4","/home/ubuntu01/Developer/Laioffer/starlink/src/components/Footer.js":"5","/home/ubuntu01/Developer/Laioffer/starlink/src/components/Main.js":"6","/home/ubuntu01/Developer/Laioffer/starlink/src/components/SatSetting.js":"7","/home/ubuntu01/Developer/Laioffer/starlink/src/components/SatelliteList.js":"8","/home/ubuntu01/Developer/Laioffer/starlink/src/constants.js":"9","/home/ubuntu01/Developer/Laioffer/starlink/src/components/WorldMap.js":"10"},{"size":466,"mtime":1611728586086,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611727781255,"results":"13","hashOfConfig":"12"},{"size":261,"mtime":1611902409984,"results":"14","hashOfConfig":"12"},{"size":445,"mtime":1611728778467,"results":"15","hashOfConfig":"12"},{"size":299,"mtime":1611729103479,"results":"16","hashOfConfig":"12"},{"size":1867,"mtime":1613713103665,"results":"17","hashOfConfig":"12"},{"size":4413,"mtime":1611898264376,"results":"18","hashOfConfig":"12"},{"size":3424,"mtime":1613709750915,"results":"19","hashOfConfig":"12"},{"size":306,"mtime":1613706888605,"results":"20","hashOfConfig":"12"},{"size":7823,"mtime":1613714409426,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"15m6l0v",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/home/ubuntu01/Developer/Laioffer/starlink/src/index.js",[],["44","45"],"/home/ubuntu01/Developer/Laioffer/starlink/src/reportWebVitals.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/App.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/Header.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/Footer.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/Main.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/SatSetting.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/SatelliteList.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/constants.js",[],"/home/ubuntu01/Developer/Laioffer/starlink/src/components/WorldMap.js",["46","47","48"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n  } from \"../constants\";\n  \n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n          isLoading: false,\n          isDrawing: false\n        };\n        \n        // create reference for map so that we can access it later\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n\n        // map contains information about projection, canvas\n        this.map = null;\n\n        // map a number to a color\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // step1: get setting and selected sat list\n        if (prevProps.satData !== this.props.satData) {\n          const {\n            latitude,\n            longitude,\n            elevation,\n            altitude,\n            duration\n          } = this.props.observerData;\n          const endTime = duration * 60;\n    \n          this.setState({\n            isLoading: true\n          });\n\n          // step2: prepare for ulrs\n          const urls = this.props.satData.map(sat => {\n            const { satid } = sat;\n            const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n    \n            return axios.get(url);\n          });\n          \n          // step3: parse sat position data\n          Promise.all(urls)\n            .then(res => {\n              const arr = res.map(sat => sat.data);\n              this.setState({\n                isLoading: false,\n                isDrawing: true\n              });\n\n              // step4: track\n              if (!prevState.isDrawing) {\n                this.track(arr);\n              } else {\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML =\n                  \"Please wait for these satellite animation to finish before selection new ones!\";\n              }\n            })\n            .catch(e => {\n              console.log(\"err in fetch satellite position -> \", e.message);\n            });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n          throw new Error(\"no position data\");\n          return;\n        }\n        \n        // step1: total number of positions\n        const len = data[0].positions.length;\n\n        // step2: duration\n        const { duration } = this.props.observerData;\n\n        // step3: where to draw\n        const { context2 } = this.map;\n    \n        let now = new Date();\n    \n        let i = 0;\n    \n        let timer = setInterval(() => {\n          let ct = new Date();\n    \n          let timePassed = i === 0 ? 0 : ct - now;\n          let time = new Date(now.getTime() + 60 * timePassed);\n            \n          // drawing track\n          context2.clearRect(0, 0, width, height);\n    \n          context2.font = \"bold 14px sans-serif\";\n          context2.fillStyle = \"#333\";\n          context2.textAlign = \"center\";\n          context2.fillText(d3TimeFormat(time), width / 2, 10);\n    \n          if (i >= len) {\n            clearInterval(timer);\n            this.setState({ isDrawing: false });\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML = \"\";\n            return;\n          }\n    \n          // draw each sat on canvas at time of i\n          data.forEach(sat => {\n            const { info, positions } = sat;\n            this.drawSat(info, positions[i]);\n          });\n          \n          // interval of time points is 60 seconds\n          i += 60;\n        }, 1000);\n      };\n \n      drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n    \n        if (!satlongitude || !satlatitude) return;\n    \n        const { satname } = sat;\n        // use regular expression to get sat number only\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n    \n        const { projection, context2 } = this.map;\n        // map longitude and latitude to x and y in canvas\n        const xy = projection([satlongitude, satlatitude]);\n    \n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        // sat is represented by a circle on canvas\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n    \n        // set the sat number beside the circle on canvas\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n      };    \n\n    generateMap(land){\n        // create projection - map shape\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        // logitude and latitude    \n        const graticule = geoGraticule();\n\n        // map reference is used here with d3Select\n        // remember to use .current\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n      \n\n        // prepare canvas as 2d\n        const context = canvas.node().getContext(\"2d\");\n        // prepare canvas for tracking sat\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        // draw the boundary of countries with geoPath\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            // filling color\n            context.fillStyle = '#B3DDEF';\n            // draw pen color\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            // draw longitude and latidute\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.5;\n            context.stroke();\n\n            // draw top line and bottom line of the map\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n      \n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n          <div className=\"map-box\">\n            {isLoading ? (\n              <div className=\"spinner\">\n                <Spin tip=\"Loading...\" size=\"large\" />\n              </div>\n            ) : null}\n            <canvas className=\"map\" ref={this.refMap} />\n            <canvas className=\"track\" ref={this.refTrack} />\n            <div className=\"hint\" />\n          </div>\n        );\n    }\n}\n\nexport default WorldMap;\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":59,"column":13,"nodeType":"55","messageId":"56","endLine":59,"endColumn":21},{"ruleId":"57","severity":1,"message":"58","line":103,"column":11,"nodeType":"59","messageId":"60","endLine":103,"endColumn":18},{"ruleId":"53","severity":1,"message":"61","line":110,"column":17,"nodeType":"55","messageId":"56","endLine":110,"endColumn":25},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'altitude' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'duration' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]